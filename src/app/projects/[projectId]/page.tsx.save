OBOO/nOOOOOOO/ src/app/projects/[projectId]/page.tsx

import { useState, useEffect } from "react";
import { use } from "react"; // Import React.use for unwrapping params
import { supabase } from "@/utils/supabaseClient"; // Correct import path for supabase client
import TaskForm from "@/components/TaskForm";
import TaskCard from "@/components/TaskCard";

// Define the Task interface
interface Task {
  id: string;
  title: string;
  description: string;
  status: "todo" | "in_progress" | "done"; // Status should be strictly typed
}

interface ProjectDetailsPageProps {
  params: {
    projectId: string;
  };
}

const ProjectDetailsPage = ({ params }: ProjectDetailsPageProps) => {
  const [tasks, setTasks] = useState<Task[]>([]); // Proper typing for tasks state
  const [filterStatus, setFilterStatus] = useState<"all" | "todo" | "in_progress" | "done">("all"); // Filter state

  // Unwrap the params to access projectId
  const projectId = use(params.projectId); // Unwrap the projectId from params

  // Fetch tasks from Supabase on mount
  useEffect(() => {
    const fetchTasks = async () => {
      const { data, error } = await supabase
        .from("tasks")
        .select("*")
        .eq("project_id", projectId);

      if (error) {
        console.error("Error fetching tasks:", error.message);
      } else {
        setTasks(data); // Set tasks properly with the correct type
      }
    };
    if (projectId) {
      fetchTasks();
    }
  }, [projectId]);

  // Handle adding a task
  const handleAddTask = async (title: string, description: string, status: "todo" | "in_progress" | "done") => {
    const { data, error } = await supabase
      .from("tasks")
      .insert([{ title, description, status, project_id: projectId }])
      .single();

    if (error) {
      console.error("Error adding task:", error.message);
    } else {
      setTasks((prevTasks) => [...prevTasks, data]); // Add new task to state
    }
  };

  // Handle deleting a task
  const handleDeleteTask = async (taskId: string) => {
    const { error } = await supabase.from("tasks").delete().eq("id", taskId);
    if (error) {
      console.error("Error deleting task:", error.message);
    } else {
      setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId)); // Filter out deleted task
    }
  };

  // Handle task editing (you can implement editing logic here)
  const handleEditTask = async (updatedTask: Task) => {
    const { data, error } = await supabase
      .from("tasks")
      .update({
        title: updatedTask.title,
        description: updatedTask.description,
        status: updatedTask.status,
      })
      .eq("id", updatedTask.id)
      .select()
      .single();

    if (error) {
      console.error("Error editing task:", error.message);
      return;
    }

    setTasks((prevTasks) =>
      prevTasks.map((task) => (task.id === updatedTask.id ? data : task))
    );
  };

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-8">Project Tasks</h1>

      {/* Task Form */}
      <TaskForm onAddTask={handleAddTask} />

      {/* Filter Buttons */}
      <div className="flex gap-4 my-6">
        {["all", "todo", "in_progress", "done"].map((status) => (
          <button
            key={status}
            onClick={() => setFilterStatus(status as "all" | "todo" | "in_progress" | "done")}
            className={`px-4 py-2 rounded-lg ${filterStatus === status ? "bg-blue-600 text-white" : "bg-gray-200"}`}
          >
            {status === "all" ? "All" : status.replace("_", " ").toUpperCase()}
          </button>
        ))}
      </div>

      {/* Task List */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {tasks
          .filter((task) => filterStatus === "all" || task.status === filterStatus)
          .map((task) => (
            <TaskCard
              key={task.id}
              task={task}
              onEdit={() => handleEditTask(task)} // Pass the full task object here
              onDelete={() => handleDeleteTask(task.id)}
            />
          ))}
      </div>
    </div>
  );
};

export default ProjectDetailsPage;
